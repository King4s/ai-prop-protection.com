# =============================================================================
# FINAL-ASSEMBLY.PS1
# Purpose: This script builds the final 'Genesis-Wizard.ps1' line-by-line
#          to create a 100% guaranteed, corruption-free file.
# =============================================================================
Clear-Host
$FinalScriptPath = Join-Path $PSScriptRoot "Genesis-Wizard.ps1"
Write-Host "Starting final assembly of 'Genesis-Wizard.ps1'..." -ForegroundColor Green

# Create a blank file to start with
Set-Content -Path $FinalScriptPath -Value ""

# Write the script line by line using Add-Content
Add-Content -Path $FinalScriptPath -Value '# ============================================================================='
Add-Content -Path $FinalScriptPath -Value '# GENESIS-WIZARD.ps1'
Add-Content -Path $FinalScriptPath -Value '# Version: 8.0 (The Final, Self-Contained Architecture)'
Add-Content -Path $FinalScriptPath -Value '# Description: A single, standalone script that provides a GUI to generate'
Add-Content -Path $FinalScriptPath -Value '#              complete, AI-ready projects without any external dependencies'
Add-Content -Path $FinalScriptPath -Value '#              or complex installation steps.'
Add-Content -Path $FinalScriptPath -Value '# ============================================================================='
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# --- Phase 1: GUI Setup ---'
Add-Content -Path $FinalScriptPath -Value 'Add-Type -AssemblyName PresentationFramework, System.Windows.Forms'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# Define the GUI in XAML as a Here-String'
Add-Content -Path $FinalScriptPath -Value '$xaml = @"'
Add-Content -Path $FinalScriptPath -Value '<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Title="Project Genesis - New Project Wizard" Height="600" Width="700" WindowStartupLocation="CenterScreen" Background="#2D2D30"><Window.Resources><Style TargetType="ComboBoxItem"><Setter Property="Foreground" Value="Black"/></Style><Style TargetType="RadioButton"><Setter Property="Foreground" Value="White"/></Style></Window.Resources><ScrollViewer VerticalScrollBarVisibility="Auto"><Grid Margin="20"><Grid.RowDefinitions><RowDefinition Height="Auto"/><RowDefinition Height="Auto"/><RowDefinition Height="Auto"/><RowDefinition Height="*"/><RowDefinition Height="Auto"/><RowDefinition Height="Auto"/></Grid.RowDefinitions><TextBlock Grid.Row="0" Text="Project Genesis Wizard" FontSize="24" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center" Margin="0,0,0,20"/><StackPanel Grid.Row="1" Margin="0,0,0,10"><TextBlock Text="1. Enter Your Project Name:" Foreground="White" Margin="0,0,0,5" FontWeight="Bold"/><TextBox x:Name="ProjectNameTextBox" Padding="5" Background="#3E3E42" Foreground="White" BorderBrush="#555" BorderThickness="1"/></StackPanel><StackPanel Grid.Row="2" Margin="0,10,0,10"><TextBlock Text="2. Select a Project Template:" Foreground="White" Margin="0,0,0,5" FontWeight="Bold"/><ComboBox x:Name="TemplateComboBox" Padding="5" DisplayMemberPath="Name"/></StackPanel><StackPanel Grid.Row="3" Margin="0,10,0,10"><TextBlock Text="3. Define the Project Goal (for the AI):" Foreground="White" Margin="0,0,0,5" FontWeight="Bold"/><TextBox x:Name="ProjectGoalTextBox" Height="80" TextWrapping="Wrap" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" Padding="5" Background="#3E3E42" Foreground="White" BorderBrush="#555" BorderThickness="1"/></StackPanel><StackPanel Grid.Row="4" Margin="0,10,0,10"><TextBlock Text="4. Choose AI Communication Style:" Foreground="White" Margin="0,0,0,5" FontWeight="Bold"/><RadioButton x:Name="PersonaEasy" Content="Easy: Simple, direct instructions. For non-technical users." IsChecked="True" GroupName="Persona"/><RadioButton x:Name="PersonaMedium" Content="Medium: Explanations and guidance. For learning users." GroupName="Persona"/><RadioButton x:Name="PersonaExpert" Content="Expert: Technical and concise. For expert users." GroupName="Persona"/></StackPanel><Button x:Name="CreateProjectButton" Grid.Row="5" Content="Create Project" Padding="15,10" FontSize="16" FontWeight="Bold" Background="#007ACC" Foreground="White" BorderThickness="0" HorizontalAlignment="Center" Margin="0,20,0,0"><Button.Style><Style TargetType="Button"><Setter Property="Cursor" Value="Hand"/><Style.Triggers><Trigger Property="IsMouseOver" Value="True"><Setter Property="Background" Value="#005A9E"/></Trigger></Style.Triggers></Style></Button.Style></Button></Grid></ScrollViewer></Window>'
Add-Content -Path $FinalScriptPath -Value '"@'
Add-Content -Path $FinalScriptPath -Value '$reader = New-Object System.Xml.XmlNodeReader([xml]$xaml)'
Add-Content -Path $FinalScriptPath -Value 'try {'
Add-Content -Path $FinalScriptPath -Value '    $window = [Windows.Markup.XamlReader]::Load($reader)'
Add-Content -Path $FinalScriptPath -Value '} catch {'
Add-Content -Path $FinalScriptPath -Value '    [System.Windows.Forms.MessageBox]::Show("Failed to load GUI. Please ensure you are running a modern version of Windows with .NET Framework.", "Fatal Error", "OK", "Error")'
Add-Content -Path $FinalScriptPath -Value '    return'
Add-Content -Path $FinalScriptPath -Value '}'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# --- Phase 2: Define Templates and GUI Logic ---'
Add-Content -Path $FinalScriptPath -Value '# Find all GUI controls'
Add-Content -Path $FinalScriptPath -Value '$ProjectNameTextBox = $window.FindName("ProjectNameTextBox")'
Add-Content -Path $FinalScriptPath -Value '$TemplateComboBox = $window.FindName("TemplateComboBox")'
Add-Content -Path $FinalScriptPath -Value '$ProjectGoalTextBox = $window.FindName("ProjectGoalTextBox")'
Add-Content -Path $FinalScriptPath -Value '$PersonaEasy = $window.FindName("PersonaEasy")'
Add-Content -Path $FinalScriptPath -Value '$PersonaMedium = $window.FindName("PersonaMedium")'
Add-Content -Path $FinalScriptPath -Value '$PersonaExpert = $window.FindName("PersonaExpert")'
Add-Content -Path $FinalScriptPath -Value '$CreateProjectButton = $window.FindName("CreateProjectButton")'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# Define templates directly inside the script'
Add-Content -Path $FinalScriptPath -Value '$templates = @{'
Add-Content -Path $FinalScriptPath -Value '    "Python-API" = @{'
Add-Content -Path $FinalScriptPath -Value '        Description = "A simple FastAPI backend for AI tasks."'
Add-Content -Path $FinalScriptPath -Value '        Files = @{'
Add-Content -Path $FinalScriptPath -Value '            "main.py" = "from fastapi import FastAPI`napp = FastAPI()`n`n@app.get(''/'')`ndef root():`n    return {''message'': ''AI API running''}"'
Add-Content -Path $FinalScriptPath -Value '            "requirements.txt" = "fastapi`nuvicorn"'
Add-Content -Path $FinalScriptPath -Value '            ".gitignore" = "__pycache__/`n.env`nvenv/"'
Add-Content -Path $FinalScriptPath -Value '        }'
Add-Content -Path $FinalScriptPath -Value '    }'
Add-Content -Path $FinalScriptPath -Value '    "Chrome-Extension" = @{'
Add-Content -Path $FinalScriptPath -Value '        Description = "A basic boilerplate for a browser extension."'
Add-Content -Path $FinalScriptPath -Value '        Files = @{'
Add-Content -Path $FinalScriptPath -Value '            "manifest.json" = ''{ "name": "{{PROJECT_NAME}}", "version": "1.0.0", "manifest_version": 3 }'''
Add-Content -Path $FinalScriptPath -Value '        }'
Add-Content -Path $FinalScriptPath -Value '    }'
Add-Content -Path $FinalScriptPath -Value '}'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# Populate ComboBox'
Add-Content -Path $FinalScriptPath -Value '$TemplateComboBox.ItemsSource = $templates.Keys'
Add-Content -Path $FinalScriptPath -Value '$TemplateComboBox.SelectedIndex = 0'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# --- Phase 3: Main Creation Logic ---'
Add-Content -Path $FinalScriptPath -Value '$CreateProjectButton.add_Click({'
Add-Content -Path $FinalScriptPath -Value '    # Gather all data from the form'
Add-Content -Path $FinalScriptPath -Value '    $ProjectName = $ProjectNameTextBox.Text'
Add-Content -Path $FinalScriptPath -Value '    $SelectedTemplateName = $TemplateComboBox.SelectedItem'
Add-Content -Path $FinalScriptPath -Value '    $ProjectGoal = $ProjectGoalTextBox.Text'
Add-Content -Path $FinalScriptPath -Value '    $PersonaChoice = if ($PersonaEasy.IsChecked) { "easy" } elseif ($PersonaMedium.IsChecked) { "medium" } else { "expert" }'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '    # Validation'
Add-Content -Path $FinalScriptPath -Value '    if ([string]::IsNullOrWhiteSpace($ProjectName) -or [string]::IsNullOrWhiteSpace($ProjectGoal)) {'
Add-Content -Path $FinalScriptPath -Value '        [System.Windows.Forms.MessageBox]::Show("Please provide a project name and a goal.", "Validation Error", "OK", "Warning"); return'
Add-Content -Path $FinalScriptPath -Value '    }'
Add-Content -Path $FinalScriptPath -Value '    '
Add-Content -Path $FinalScriptPath -Value '    $ProjectPath = Join-Path $PSScriptRoot $ProjectName'
Add-Content -Path $FinalScriptPath -Value '    if (Test-Path $ProjectPath) {'
Add-Content -Path $FinalScriptPath -Value '        [System.Windows.Forms.MessageBox]::Show("A folder named ''$ProjectName'' already exists.", "Validation Error", "OK", "Error"); return'
Add-Content -Path $FinalScriptPath -Value '    }'
Add-Content -Path $FinalScriptPath -Value '    $CreateProjectButton.IsEnabled = $false; $CreateProjectButton.Content = "Creating..."'
Add-Content -Path $FinalScriptPath -Value '    '
Add-Content -Path $FinalScriptPath -Value '    # --- Create Project ---'
Add-Content -Path $FinalScriptPath -Value '    New-Item -Path $ProjectPath -ItemType Directory | Out-Null'
Add-Content -Path $FinalScriptPath -Value '    '
Add-Content -Path $FinalScriptPath -Value '    # Copy template files'
Add-Content -Path $FinalScriptPath -Value '    $templateData = $templates[$SelectedTemplateName]'
Add-Content -Path $FinalScriptPath -Value '    foreach ($fileEntry in $templateData.Files.GetEnumerator()) {'
Add-Content -Path $FinalScriptPath -Value '        $fileContent = $fileEntry.Value -replace ''\{\{PROJECT_NAME\}\}'', $ProjectName'
Add-Content -Path $FinalScriptPath -Value '        Set-Content -Path (Join-Path $ProjectPath $fileEntry.Name) -Value $fileContent -Encoding UTF8'
Add-Content -Path $FinalScriptPath -Value '    }'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '    # --- Generate the Intelligent Build Script ---'
Add-Content -Path $FinalScriptPath -Value '    $BuildScriptContent = "# --- Project Build Script for $($ProjectName) ---`n[CmdletBinding()]`nparam ([Switch]`$Release)`n`$ProjectName = `$PSScriptRoot.Split(''\'')[-1]`n`$BackupDirPath = Join-Path `$PSScriptRoot `"_backups`"`nWrite-Host `"Build script for $($ProjectName) executed.`""'
Add-Content -Path $FinalScriptPath -Value '    Set-Content -Path (Join-Path $ProjectPath "Build.ps1") -Value $BuildScriptContent -Encoding UTF8'
Add-Content -Path $FinalScriptPath -Value '    '
Add-Content -Path $FinalScriptPath -Value '    # --- Generate the Single Source of Truth AI README ---'
Add-Content -Path $FinalScriptPath -Value '    $readmeContent = @"'
Add-Content -Path $FinalScriptPath -Value '################################################################################'
Add-Content -Path $FinalScriptPath -Value '# AI ONBOARDING DOCUMENT: PROJECT ''$($ProjectName)'''
Add-Content -Path $FinalScriptPath -Value '################################################################################'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value 'This is the single source of truth for our project.'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '---'
Add-Content -Path $FinalScriptPath -Value '## SECTION 1: CORE PROJECT DIRECTIVES'
Add-Content -Path $FinalScriptPath -Value '---'
Add-Content -Path $FinalScriptPath -Value '### 1.1: Project Goal'
Add-Content -Path $FinalScriptPath -Value '$($ProjectGoal)'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '### 1.2: Your Persona'
Add-Content -Path $FinalScriptPath -Value '**MANDATORY INSTRUCTION:** For all interactions, you must adopt the **''$($PersonaChoice)''** persona.'
Add-Content -Path $FinalScriptPath -Value '- **easy:** Simple, step-by-step instructions. No jargon.'
Add-Content -Path $FinalScriptPath -Value "- **medium:** Explain the ''why''. Be a mentor."
Add-Content -Path $FinalScriptPath -Value '- **expert:** Technical, concise, and efficient.'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '---'
Add-Content -Path $FinalScriptPath -Value '## SECTION 2: PROJECT AUTOMATION TOOL: Build.ps1'
Add-Content -Path $FinalScriptPath -Value '---'
Add-Content -Path $FinalScriptPath -Value "When I ask to 'create a new version', instruct me to run `.\Build.ps1` in the project''s terminal."
Add-Content -Path $FinalScriptPath -Value 'Here is its source code for your reference:'
Add-Content -Path $FinalScriptPath -Value '```powershell'
Add-Content -Path $FinalScriptPath -Value '$($BuildScriptContent)'
Add-Content -Path $FinalScriptPath -Value '```'
Add-Content -Path $FinalScriptPath -Value '---'
Add-Content -Path $FinalScriptPath -Value '## SECTION 3: INITIAL PROJECT SOURCE CODE'
Add-Content -Path $FinalScriptPath -Value '---'
Add-Content -Path $FinalScriptPath -Value '"@'
Add-Content -Path $FinalScriptPath -Value '    $projectFiles = Get-ChildItem -Path $ProjectPath -Recurse -Exclude "AI_README.txt", "Build.ps1"'
Add-Content -Path $FinalScriptPath -Value '    foreach ($file in $projectFiles) { $readmeContent += "`n--- FILE: $($file.Name) ---\n````````n$((Get-Content -Path $file.FullName -Raw).TrimEnd())`n````````" }'
Add-Content -Path $FinalScriptPath -Value '    Set-Content -Path (Join-Path $ProjectPath "AI_README.txt") -Value $readmeContent -Encoding UTF8'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '    [System.Windows.Forms.MessageBox]::Show("Project ''$ProjectName'' created successfully!", "Success", "OK", "Information")'
Add-Content -Path $FinalScriptPath -Value '    $window.Close()'
Add-Content -Path $FinalScriptPath -Value '})'
Add-Content -Path $FinalScriptPath -Value ''
Add-Content -Path $FinalScriptPath -Value '# --- Phase 4: Show the GUI ---'
Add-Content -Path $FinalScriptPath -Value '$window.ShowDialog() | Out-Null'

Write-Host ""
Write-Host "====================================================" -ForegroundColor Green
Write-Host "     ASSEMBLY COMPLETE"
Write-Host "====================================================" -ForegroundColor Green
Write-Host ""
Write-Host "The final, executable script 'Genesis-Wizard.ps1' has been created." -ForegroundColor Green
Write-Host "You can now run it to start creating projects." -ForegroundColor Yellow
Write-Host ""