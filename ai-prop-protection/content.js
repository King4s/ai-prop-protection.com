let DOMAINS_LIST=[],KEYWORDS_LIST=[],SCANNED_ELEMENTS=new WeakSet;chrome.runtime.onMessage.addListener((e,t,s)=>{if("executeScan"===e.action)return initializeAndScan(),!0});async function initializeAndScan(){const e=await fetchData("domains.json"),t=await fetchData("keywords.json");DOMAINS_LIST=e.domains||[],KEYWORDS_LIST=t.keywords||[],SCANNED_ELEMENTS=new WeakSet,chrome.runtime.sendMessage({action:"resetThreatCount"}),performBruteForceScan()}function performBruteForceScan(){const e=document.querySelectorAll("p, div, span, td, li");Array.from(e).forEach(e=>{if(e.innerText&&e.innerText.length>40&&!e.querySelector("p, div")&&!SCANNED_ELEMENTS.has(e)){scanSingleElement(e),SCANNED_ELEMENTS.add(e)}})}function scanSingleElement(e){const t=e.innerText.toLowerCase();if(t){for(const s of DOMAINS_LIST)if(t.includes(s))return createWarningBanner(s,e,"domain"),void chrome.runtime.sendMessage({action:"threatDetected"});for(const n of KEYWORDS_LIST)if(t.includes(n))return void createWarningBanner(n,e,"keyword")}}async function fetchData(e){try{const t=await fetch(chrome.runtime.getURL(e));return await t.json()||{}}catch(e){return console.error(`AIPP Error: ${e}`),{}}}function createWarningBanner(e,t,s){const n=t.querySelector(".ai-prop-protection-warning");if(n&&"domain"===n.dataset.type)return;n&&n.remove();const o=document.createElement("div");o.className="ai-prop-protection-warning",o.dataset.type=s,"domain"===s?(o.style.backgroundColor="#ff4d4d",o.style.border="2px solid #cc0000",o.innerHTML=`âš ï¸ **AIPP WARNING** âš ï¸<br>This response may directly cite a source (${e}) linked to a known disinformation network.`):(o.style.backgroundColor="#ffc107",o.style.border="2px solid #d39e00",o.innerHTML=`ðŸ’¡ **AIPP CONTEXT-AWARENESS** ðŸ’¡<br>This conversation mentions a known propaganda entity ("${e}"). Please remain critical of the information presented.`),o.style.color="black",o.style.padding="10px",o.style.margin="10px 0 0 0",o.style.borderRadius="8px",o.style.fontWeight="bold",t.append(o)}
